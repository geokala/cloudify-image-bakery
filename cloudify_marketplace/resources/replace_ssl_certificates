#! /usr/bin/env python
import json
import logging
import logging.handlers
import os
import shutil
import subprocess
import time

from cloudify_rest_client import CloudifyClient
from cloudify_cli.utils import get_auth_header

target_file = '/tmp/cloudify_ssl_certificate_replacement.json'

logger = logging.getLogger('cloudify_security_config')
# TODO: logging.INFO or maybe look for a flag
logger.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(address='/dev/log')
logger.addHandler(handler)


if __name__ == '__main__':
    logger.debug('Looking for cloudify security configuration json')
    if os.path.isfile(target_file):
        logger.info('Found cloudify security configuration, processing')
        # Even if the writing is for some reason partially complete,
        # we'll be re-running in at most 1 minute anyway
        with open(target_file) as target_file_handle:
            details = json.load(target_file_handle)
        logger.debug('JSON: {contents}'.format(contents=str(details)))
        # We're done, we don't need the details file any more
        # Remove the file now in case we take more than a minute to run
        os.unlink(target_file)
        logger.debug('Deleted security configuration file')

        execution_id = details['execution_id']
        auth_header = get_auth_header(
            username=details['cloudify_username'],
            password=details['cloudify_password'],
        )
        cert_path = '/root/cloudify/server.crt'

        c = CloudifyClient(
            headers=auth_header,
            cert=cert_path,
            trust_all=False,
            port=443,
            protocol='https',
        )

        logger.info('Waiting for configuration workflow to finish...')
        while c.executions.get(execution_id)['status'] != 'terminated':
            time.sleep(0.5)
        logger.info('...configuration workflow finished.')

        # Update the cert in the provider context
        broker_cert_path = '/etc/rabbit-pub.pem'
        with open(broker_cert_path) as cert_handle:
            public_cert = cert_handle.read()
        logger.info('Updated broker cert in provider context with new cert.')
        name = c.manager.get_context()['name']
        context = c.manager.get_context()['context']
        context['cloudify']['cloudify_agent']['broker_ssl_cert'] = public_cert
        c.manager.update_context(name, context)

        # Don't restart the same service more than once
        services = set(details['restart_services'])

        # Stop services to try to avoid logging meaningless errors while certs
        # are being replaced
        for service in details['restart_services']:
            logger.info('Stopping {service}'.format(service=service))
            # If it fails to stop that's not a critical problem
            subprocess.call(['/sbin/service', service, 'stop'])

        # Replace certs
        for temp_cert, destination in details['new_certs']:
            logger.info('Copying {temp} to {destination}'.format(
                temp=temp_cert,
                destination=destination,
            ))
            shutil.copyfile(temp_cert, destination)

        # Start services
        for service in details['restart_services']:
            logger.info('Starting {service}'.format(service=service))
            # Call restart in case any of them didn't stop properly
            subprocess.check_call(['/sbin/service', service, 'restart'])

        # Clean up temporary certificates
        logger.info('Deleting temporary certificates')
        for temp_cert, _ in details['new_certs']:
            logger.debug('Trying to delete {temp}'.format(temp=temp_cert))
            try:
                os.unlink(temp_cert)
                logger.debug('Deleted {temp}'.format(temp=temp_cert))
            except OSError:
                # Already deleted this temp cert
                logger.debug(
                    'Could not delete {temp}. '
                    'Assuming already deleted.'.format(temp=temp_cert)
                )

        # And we can stop running, too
        logger.info('Stopping security configuration cron job')
        os.unlink('/etc/cron.d/cloudify_security_configuration')
