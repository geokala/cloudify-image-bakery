tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4m5/types.yaml
  - dependencies/aws_dependencies.yaml

inputs:

  manager_names_and_ips:
    type: string
    description: >
      Comma separated list of DNS names and IP addresses that are valid for
      accessing the manager UI through a web browser.
      e.g. 192.0.2.54,mycloudify.example.com,mycloudify.dev.example.com,192.0.2.100

  broker_names_and_ips:
    type: string
    default: ''
    description: >
      Comma separated list of DNS names and IP addresses that are valid for
      accessing the broker through an AMQP client.
      e.g. 192.0.2.54,mybroker.example.com,mybroker.dev.example.com,192.0.2.100

  user_ssh_key:
    type: string
    default: ''
    description: >
      SSH key to authorize for access to the image builder user account.

  agents_security_group_name:
    type: string
    default: cloudify-agents-security-group
    description: >
      Security group to be generated and used for accessing agents on VMs.

  agents_keypair_name:
    type: string
    default: cloudify-agents-keypair
    description: >
      Keypair to be generated and used for accessing agents on VMs.

  agents_user:
    type: string
    default: centos
    description: >
      User to be used for accessing agents on VMs.

  aws_access_key:
    type: string
    description: >
      Access key to use when accessing AWS API.

  aws_secret_key:
    type: string
    description: >
      Secret key to use when accessing AWS API.

  agents_to_manager_inbound_ports:
    type: string
    description: >
      Comma separated list of tcp ports to allow from the agents
      to the manager.
    default: 5672,8101,53229

node_templates:

  general_configuration:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/configure.py
          executor: central_deployment_agent
          inputs:
            user_ssh_key: { get_input: user_ssh_key }
            manager_names_and_ips: { get_input: manager_names_and_ips }
            broker_names_and_ips: { get_input: broker_names_and_ips }

  # TODO: Split this out and composite the general config part
  aws_configuration:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/configure_aws.py
          executor: central_deployment_agent
          inputs:
            agents_security_group_name: { get_input: agents_security_group_name }
            agents_keypair_name: { get_input: agents_keypair_name }
            agents_user: { get_input: agents_user }
            aws_access_key: { get_input: aws_access_key }
            aws_secret_key: { get_input: aws_secret_key }
            agents_to_manager_inbound_ports: { get_input: agents_to_manager_inbound_ports }
    relationships:
      - type: cloudify.relationships.depends_on
        target: general_configuration

  # This is a workaround for cloudify not installing the required dependencies without a node that 'uses' them
  dependencies_install:
    type: cloudify.aws_dependencies.Install

outputs:
  manager_public_cert:
    value: { get_attribute: [general_configuration, manager_public_cert] }
